# Be sure to restart your web server when you modify this file.

# Uncomment below to force Rails into production mode when 
# you don't control web/app server and can't set it the proper way
# ENV['RAILS_ENV'] ||= 'production'

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '1.2.1' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

require 'plugins/app_config/lib/configuration'
Rails::Initializer.run do |config|
  # Settings in config/environments/* take precedence over those specified here
  
  # Skip frameworks you're not going to use (only works if using vendor/rails)
  # config.frameworks -= [ :action_web_service, :action_mailer ]

  # Only load the plugins named here, by default all plugins in vendor/plugins are loaded
  # config.plugins = %W( exception_notification ssl_requirement )

  # Add additional load paths for your own custom dirs
  # config.load_paths += %W( #{RAILS_ROOT}/extras )

  # Force all environments to use the same logger level 
  # (by default production uses :info, the others :debug)
  # config.log_level = :debug

  # Use the database for sessions instead of the file system
  # (create the session table with 'rake db:sessions:create')
  # config.action_controller.session_store = :active_record_store

  # Use SQL instead of Active Record's schema dumper when creating the test database.
  # This is necessary if your schema can't be completely dumped by the schema dumper, 
  # like if you have constraints or database-specific column types
  # config.active_record.schema_format = :sql

  # Activate observers that should always be running
  # config.active_record.observers = :cacher, :garbage_collector

  # Make Active Record use UTC-base instead of local time
  # config.active_record.default_timezone = :utc
  
  # See Rails::Configuration for more options
end

# Add new inflection rules using the following format 
# (all these examples are active by default):
# Inflector.inflections do |inflect|
#   inflect.plural /^(ox)$/i, '\1en'
#   inflect.singular /^(ox)en/i, '\1'
#   inflect.irregular 'person', 'people'
#   inflect.uncountable %w( fish sheep )
# end

# Add new mime types for use in respond_to blocks:
# Mime::Type.register "text/richtext", :rtf
# Mime::Type.register "application/x-mobile", :mobile

# Include your application configuration below

# Multi-thread action of foreground services.
# Reccommend you leave set to true, unless debugging. 
config.app_config.threaded_services = true 

# Specify the name of a Rails layout to use for resolver
# screens. Recommend that you put local layouts in
# app/views/layouts/local/
# config.app_config.resolve_layout = "local/my_local_layout"

# Specify name of layout for search controller, if you don't want
# the default basic one. 
# config.app_config.search_laytout = 'local/local_layout'

# Are we using the Umlaut journal db system? jrochkind does not. Defaults
# to true, however. 
# config.app_config.use_umlaut_journal_index = false

# User displayable name of application, defaults to 'Find It'
# config.app_config.app_name = 'Find It'

# Partial view to use for displaying holdings in default resolve view
#   config.app_config.partial_for_holding = 'holding_alternate'

# link_with_frameset can be used to control whether (and when)
# umlaut links to resources in a frameset page with an umlaut banner.
# See also skip_resolve_menu below 
# Possible values:
#
#  true      : always link with banner
#  false     : never link with banner
#  :standard : standard behavior -- link with banner only if the umlaut
               menu was skipped for a direct link.
#  Or, for most powerful flexibility, set to a lambda expression taking
#  one argument. That argument will be a hash containing the key
#  :service_type_join with a ServiceType value. lambda can examine
#  that join (and it's Request), and return true or false to control
#  whether that specific link should be presented with banner frameset. 
#  eg., to just banner full text links: 
#  config.app_config.link_with_frameset = 
#    lambda {|args| return args[:service_type_join].service_type_value.name == 'fulltext' }


# skip_resolve_menu can be used to control 'direct' linking, skipping
# the resolve menu to deliver a full text link or other resource
# directly to the user. See also link_with_frameset above. 
# Possible values:
# false  : [default] Never skip menu
# {services => ['fulltext']} : list of services, if they're present
#          skip the menu with the first response available. 
# lambda expression: A lambda expression can be provided that
#          should expect one argument, a hash with key :request
#          and value the Umlaut Request object. Return nil to
#          not skip menu, or a ServiceType join obj to skip
#          menu to that response. 

