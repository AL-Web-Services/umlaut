# Will show the modal dialog div, partial rendered according to string in
# @partial ivar, or if not defaults to partial
# with the same name as the current action. 

# Ugh, we want to create a new DIV under the body, whatever it's ID. The RJS
# helpers aren't very helpful. We use some raw js. 
page << <<EOF
  if($('ajax_svc_#{@svc_type.id}') == null ) {
    $$('body').first().insert( {'top': '<div id="ajax_svc_#{@svc_type.id}" class="ajax_modal_dialog" style="display:none"></div>'} );
  }
  //make it draggable
  new Draggable( $('ajax_svc_#{@svc_type.id}'), {handle:$('ajax_svc_#{@svc_type.id}').down('.inner_modal_dialog'),
   starteffect: null , endeffect: null} );
  
EOF

page.replace_html( "ajax_svc_#{@svc_type.id}", :partial => (@partial || params[:action]))


# Add the div we're going to use to hide the rest of the page.
page << <<EOF
  if($('umlaut_modal_bg_overlay') == null) {
     $$('body').first().insert( {'top': '<div id="umlaut_modal_bg_overlay" class="ajax_modal_bg_overlay" style="display:none"></div>'} );    
  
      // Weird fix for IE6 to make sure the overlay actually covers
      // the viewport.                     
      if ($('umlaut_modal_bg_overlay').getHeight() < document.viewport.getHeight() ) {
        $('umlaut_modal_bg_overlay').setStyle({height: document.viewport.getHeight() + 10 + 'px'});
      }      
  }

  // make a click on the overlay bg dismiss the current modal dialog. 
  $('umlaut_modal_bg_overlay').onclick = function() {
      new Ajax.Request('#{url_for({:controller => "export_email", :action => "reset", :id => @svc_type.id, :format => "js"})}', 
        {asynchronous:true, evalScripts:true});
  };
      
  $('umlaut_modal_bg_overlay').show();
EOF


#page[:container].visual_effect :opacity, :from => 1.0, :to => 0.3, :duration => 0.0
page[:"ajax_svc_#{@svc_type.id}"].show

# Okay, we're going to make sure it's on the browser screen, please. 
page << js_ensure_show_dialog("ajax_svc_#{@svc_type.id}")
  

