#!/usr/bin/env ruby

# This is a command line executable installed as part of the umlaut gem. 

# All it does is install a new umlaut rails app, by simply running
# 'rails new' with certain arguments, and the umlaut rails application
# template. The rails application template basically just runs the
# umlaut generator.

# We intentionally do NOT `require 'umlaut'` here, no need to load it all. 

require 'umlaut/version'

require 'optparse'
require 'ostruct'
require 'shellwords'

def run
  command = command_line( parse_options! )

  puts "\n#{command}\n\n"

  system command

  post_install_message!
end

def command_line(options)
  umlaut_template_path = File.expand_path(File.dirname(__FILE__) + '/../lib/generators/umlaut_app_template.rb')

  return "rails new -d mysql --skip-spring #{options.app_path} -m #{umlaut_template_path}"
end

def parse_options!
  options = OpenStruct.new
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: umlaut your_app_name"

    opts.separator ""
    opts.separator "Umlaut #{Umlaut::VERSION}"
    opts.separator ""
    opts.separator "Specific options:"

    #opts.on("--umlaut-path PATH", "Path to local umlaut to use") do |umlaut_path|
    #  options.umlaut_path = umlaut_path
    #end

    opts.on_tail("-h", "--help", "Show this message") do
      $stderr.puts opts
      exit
    end
  end

  begin
    parser.parse!
  rescue OptionParser::InvalidOption => e
    $stderr.puts "\n#{e.message}\n\n"
    $stderr.puts parser
    exit 1
  end

  options.app_path = ARGV.first

  if options.app_path.nil? || options.app_path.empty?
    $stderr.puts "\nNo application name provided!\n\n"
    $stderr.puts parser
    exit 1
  elsif File.basename(options.app_path) == "umlaut"
    $stderr.puts "\nYour umlaut rails app can not be called 'umlaut'\n\n"
    $stderr.puts parser
    exit 1
  end  

  return options
end

def word_wrap(text, options = {})
  line_width = options.fetch(:line_width, 80)
  indent     = options.fetch(:indent, 0).to_i

  indent_str = " " * indent

  lines = text.split("\n").collect! do |line|
    line.length > line_width ? line.gsub(/(.{1,#{line_width}})(\s+|$)/, "\\1\n").strip : line
  end.join("\n").split("\n")

  indent_str + lines.join("\n#{indent_str}") + "\n"
end

def post_install_message!
  $stdout.puts "\n#{" " * 15}Umlaut installed, now:\n\n"

  $stdout.puts  word_wrap("After setting up your 'development' database in `config/databases.yml`, run `rake db:migrate`", 
      :line_width => 60, :indent => 15)

  $stdout.puts "\n\n"

  $stdout.puts word_wrap("Then configure your app in `config/umlaut_services.yml` and `app/controllers/umlaut_controller.rb`",
    :line_width => 60, :indent => 15)

  $stdout.puts "\n\n"
end


run